#! @Chunk YonedaProjective

LoadPackage( "CatReps" );

#! @Example
ccat := ConcreteCategoryForCAP(
			  [ [2,3,4,1], [5,6,7,8], [9,10,11,12], [13,14,15,16],
				[,,,,5,8,7,6], [,,,,9,10,11,12], [,,,,13,14,15,16],
				[,,,,,,,,10,9,12,11], [,,,,,,,,13,14,15,16],
				[,,,,,,,,,,,,13,14,15,16] ] );
#! A finite concrete category
qccat := RightQuiverFromConcreteCategory( ccat );
#!  q(4)[a:1->1,b:1->2,c:1->3,d:1->4,e:2->2,f:2->3,g:2->4,
#!  h:3->3,i:3->4,j:4->4]
HOMALG_MATRICES.PreferDenseMatrices := true;
#! true
GF3 := HomalgRingOfIntegers( 3 );
#! GF(3)
kq := Algebroid( GF3, ccat );
#! Algebroid generated by the right quiver q(4)[a:1->1,b:1->2,
#! c:1->3,d:1->4,e:2->2,f:2->3,g:2->4,h:3->3,i:3->4,j:4->4]
SetIsLinearClosureOfACategory( kq, true );
CatReps := Hom( kq, GF3 );
#! The category of functors: Algebroid generated by the right quiver
#! q(4)[a:1->1,b:1->2,c:1->3,d:1->4,e:2->2,f:2->3,g:2->4,
#! h:3->3,i:3->4,j:4->4] -> Category of matrices over GF(3)
UnderlyingQuiverAlgebra( kq );
#! (GF(3) * q) / [ Z(3)^0*(a*a*a*a) + Z(3)*(1),
#! Z(3)^0*(e*e) + Z(3)*(2), Z(3)^0*(h*h) + Z(3)*(3),
#! Z(3)^0*(j) + Z(3)*(4), Z(3)*(b*f) + Z(3)^0*(c),
#! Z(3)*(b*e*f) + Z(3)^0*(a*c*h), Z(3)*(b*g) + Z(3)^0*(d),
#! Z(3)*(c*i) + Z(3)^0*(d), Z(3)*(a*c*h*i) + Z(3)^0*(b*e*g),
#! Z(3)*(a*a*a*b*e*g) + Z(3)^0*(c*h*i), Z(3)*(f*i) + Z(3)^0*(g) ]
Dimension( UnderlyingQuiverAlgebra( kq ) );
#! 43
proj1 := YonedaProjective( CatReps, kq.1 );
#! <(1)->4, (2)->8, (3)->8, (4)->8; (a)->4x4, (b)->4x8, (c)->4x8,
#! (d)->4x8, (e)->8x8, (f)->8x8, (g)->8x8, (h)->8x8, (i)->8x8, (4)->8x8>
proj2 := YonedaProjective( CatReps, kq.2 );
#! <(1)->0, (2)->2, (3)->4, (4)->4; (a)->0x0, (b)->0x2, (c)->0x4,
#! (d)->0x4, (e)->2x2, (f)->2x4, (g)->2x4, (h)->4x4, (i)->4x4, (4)->4x4>
proj3 := YonedaProjective( CatReps, kq.3 );
#! <(1)->0, (2)->0, (3)->2, (4)->2; (a)->0x0, (b)->0x0, (c)->0x2,
#! (d)->0x2, (e)->0x0, (f)->0x2, (g)->0x2, (h)->2x2, (i)->2x2, (4)->2x2>
proj4 := YonedaProjective( CatReps, kq.4 );
#! <(1)->0, (2)->0, (3)->0, (4)->1; (a)->0x0, (b)->0x0, (c)->0x0,
#! (d)->0x1, (e)->0x0, (f)->0x0, (g)->0x1, (h)->0x0, (i)->0x1, (4)->1x1>
SetOfObjects( kq );
#! [ <(1)>, <(2)>, <(3)>, <(4)> ]
dims1 := List( SetOfObjects( kq ), o-> Dimension(proj1(o)) );
#! [ 4, 8, 8, 8 ]
dims2 := List( SetOfObjects( kq ), o-> Dimension(proj2(o)) );
#! [ 0, 2, 4, 4 ]
dims3 := List( SetOfObjects( kq ), o-> Dimension(proj3(o)) );
#! [ 0, 0, 2, 2 ]
dims4 := List( SetOfObjects( kq ), o-> Dimension(proj4(o)) );
#! [ 0, 0, 0, 1 ]
dims1+dims2+dims3+dims4;
#! [ 4, 10, 14, 15 ]
Sum(dims1+dims2+dims3+dims4);
#! 43
#! @EndExample